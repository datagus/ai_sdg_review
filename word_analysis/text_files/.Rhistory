# Update the barplot code to use these colors consistently for each cluster
barplot(t(cutmodel_m[1:nk, 1:(nk+1)]),
beside = TRUE,
horiz = TRUE,
col = colores[1:(nk+1)],
legend.text = paste("Cluster", 1:(nk+1)),
args.legend = list(x = "topright", bty = "n", title = "Clusters"),
xlab = "Frequency",
ylab = "Number of clusters",
names.arg = paste((1:nk)+1),
main = "Distribution of clusters")
nk <- 8
cutmodel <-cutree(modelclust,k=nk)
table(cutmodel)
temp5<-indval(abundancet,cutmodel,numitr=1000)
summary(temp5)
#getting the DCA coordinates for the plot
achsen<-model$cproj[,c(1:2)]
#combining model columns with axis from DCA
cluster_dca<-cbind(round(temp5$indval,d=2),temp5$pval,names(temp5$pval),achsen)
cluster_dcap<-cluster_dca[cluster_dca[nk+1]<0.05,] #p-value less than ...
final_cluster<-cluster_dcap[which(apply(cluster_dcap[,c(1:nk)],1,mean)>0.01),] #filtering based on the mean of abundance across clusters of each word
par(xpd=T)
par(mar=c(4,4,0.2,0.2))
plot(final_cluster$DCA1,final_cluster$DCA2,xlim=c(min(final_cluster$DCA1)-0,max(final_cluster$DCA1)+0),ylim=c(min(final_cluster$DCA2)-0,max(final_cluster$DCA2)+0),xlab="DCA1",ylab="DCA2",type="n")
wordnumber<-5
subsets <- list()
for (i in 1:nk){
subsets[[i]] <- final_cluster[order(final_cluster[,i],decreasing=T)[c(1: wordnumber)],]
#text(subsets[[i]]$DCA1[c(1:wordnumber)],subsets[[i]]$DCA2[c(1:wordnumber)],labels=rownames(subsets[[i]])[c(1:wordnumber)],col=colores[i] ,cex=0.8)
subsets[[i]]$cluster <- i
}
par(xpd=T)
par(mar=c(4,4,0.2,0.2))
plot(final_cluster$DCA1,final_cluster$DCA2,xlim=c(min(final_cluster$DCA1)-0.3,max(final_cluster$DCA1)+0.1),ylim=c(min(final_cluster$DCA2)+0,max(final_cluster$DCA2)-0),xlab="DCA1",ylab="DCA2",type="n")
text(subsets[[1]]$DCA1[c(1)],subsets[[1]]$DCA2[c(1)], labels=rownames(subsets[[1]])[c(1)],col=colores[1],cex=1, font=2)
text(subsets[[1]]$DCA1[c(2)],subsets[[1]]$DCA2[c(2)], labels=rownames(subsets[[1]])[c(2)],col=colores[1],cex=1, font=2)
text(subsets[[1]]$DCA1[c(3)],subsets[[1]]$DCA2[c(3)]-0, labels=rownames(subsets[[1]])[c(3)],col=colores[1],cex=1, font=2)
text(subsets[[1]]$DCA1[c(4)]+0,subsets[[1]]$DCA2[c(4)]-0, labels=rownames(subsets[[1]])[c(4)],col=colores[1],cex=1,font=2)
text(subsets[[1]]$DCA1[c(5)],subsets[[1]]$DCA2[c(5)]+0.3, labels=rownames(subsets[[1]])[c(5)],col=colores[1],cex=1, font=2)
text(subsets[[2]]$DCA1[c(1)],subsets[[2]]$DCA2[c(1)], labels=rownames(subsets[[2]])[c(1)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(2)],subsets[[2]]$DCA2[c(2)], labels=rownames(subsets[[2]])[c(2)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(3)],subsets[[2]]$DCA2[c(3)], labels=rownames(subsets[[2]])[c(3)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(4)],subsets[[2]]$DCA2[c(4)], labels=rownames(subsets[[2]])[c(4)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(5)],subsets[[2]]$DCA2[c(5)], labels=rownames(subsets[[2]])[c(5)],col=colores[2],cex=1,font=2)
text(subsets[[3]]$DCA1[c(1)],subsets[[3]]$DCA2[c(1)]+0.15, labels=rownames(subsets[[3]])[c(1)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(2)],subsets[[3]]$DCA2[c(2)], labels=rownames(subsets[[3]])[c(2)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(3)],subsets[[3]]$DCA2[c(3)], labels=rownames(subsets[[3]])[c(3)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(4)],subsets[[3]]$DCA2[c(4)]-0, labels=rownames(subsets[[3]])[c(4)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(5)],subsets[[3]]$DCA2[c(5)], labels=rownames(subsets[[3]])[c(5)],col=colores[3],cex=1,font=2)
text(subsets[[4]]$DCA1[c(1)],subsets[[4]]$DCA2[c(1)], labels=rownames(subsets[[4]])[c(1)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(2)],subsets[[4]]$DCA2[c(2)], labels=rownames(subsets[[4]])[c(2)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(3)],subsets[[4]]$DCA2[c(3)], labels=rownames(subsets[[4]])[c(3)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(4)],subsets[[4]]$DCA2[c(4)], labels=rownames(subsets[[4]])[c(4)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(5)],subsets[[4]]$DCA2[c(5)], labels=rownames(subsets[[4]])[c(5)],col=colores[4],cex=1,font=2)
text(subsets[[5]]$DCA1[c(1)],subsets[[5]]$DCA2[c(1)], labels=rownames(subsets[[5]])[c(1)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(2)],subsets[[5]]$DCA2[c(2)], labels=rownames(subsets[[5]])[c(2)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(3)],subsets[[5]]$DCA2[c(3)], labels=rownames(subsets[[5]])[c(3)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(4)],subsets[[5]]$DCA2[c(4)], labels=rownames(subsets[[5]])[c(4)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(5)],subsets[[5]]$DCA2[c(5)], labels=rownames(subsets[[5]])[c(5)],col=colores[5],cex=1,font=2)
text(subsets[[6]]$DCA1[c(1)],subsets[[6]]$DCA2[c(1)], labels=rownames(subsets[[6]])[c(1)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(2)],subsets[[6]]$DCA2[c(2)]+0, labels=rownames(subsets[[6]])[c(2)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(3)],subsets[[6]]$DCA2[c(3)], labels=rownames(subsets[[6]])[c(3)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(4)],subsets[[6]]$DCA2[c(4)], labels=rownames(subsets[[6]])[c(4)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(5)],subsets[[6]]$DCA2[c(5)], labels=rownames(subsets[[6]])[c(5)],col=colores[6],cex=1,font=2)
text(subsets[[7]]$DCA1[c(1)],subsets[[7]]$DCA2[c(1)], labels=rownames(subsets[[7]])[c(1)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(2)],subsets[[7]]$DCA2[c(2)], labels=rownames(subsets[[7]])[c(2)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(3)],subsets[[7]]$DCA2[c(3)], labels=rownames(subsets[[7]])[c(3)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(4)],subsets[[7]]$DCA2[c(4)], labels=rownames(subsets[[7]])[c(4)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(5)]-0,subsets[[7]]$DCA2[c(5)], labels=rownames(subsets[[7]])[c(5)],col=colores[7],cex=1,font=2)
text(subsets[[8]]$DCA1[c(1)],subsets[[8]]$DCA2[c(1)], labels=rownames(subsets[[8]])[c(1)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(2)],subsets[[8]]$DCA2[c(2)], labels=rownames(subsets[[8]])[c(2)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(3)],subsets[[8]]$DCA2[c(3)], labels=rownames(subsets[[8]])[c(3)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(4)],subsets[[8]]$DCA2[c(4)], labels=rownames(subsets[[8]])[c(4)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(5)],subsets[[8]]$DCA2[c(5)]+0.15, labels=rownames(subsets[[8]])[c(5)],col=colores[8],cex=1,font=2)
colores <- c("#FF0000","#008000","#800000","#0000FF","#808000","#FF00FF",
"#800080","#008080","#000080","#FFA500","#A52A2A","#8B4513","#DC143C",
"#DA70D6","#7FFF00","#D2691E","#00CED1","#9400D3","#FFD700","#ADFF2F","#FF69B4","#CD5C5C"
) #for empirical
library(tm) # library for text mining
library(plyr) #Tools for Splitting, Applying and Combining Data
library(cluster) #library for cluster analysis
library(labdsv) #library for Ordination and Multivariate Analysis for Ecology
library(vegan) #another ordinations methods library
library(dendextend) #for better dendograms
library(plotrix)
library(openxlsx)
setwd("/Users/jorgegustavorodriguezaboytes/data-science/general/review_ai_sdg/word_analysis/text_files")
#----IMPORTING ARTICLES  AND STORING THEM INTO A LIST----
all_titles <- list.files() #files_names are storied into this list
papers_titles <- list() #empty list for the filtered titles
articles <- list() # creating an empty list where files are going to be stored
i=1
start=1
for (i in c(i:length(all_titles))){
method <- substring(all_titles[i], 1, 4)
#method <- all_titles[i]
if(grepl("e", method) | grepl("e", method)){
papers_titles <- append(papers_titles, all_titles[i])
}
}
papers_titles <- as.character(papers_titles)
remove_papers_emp <- c("11_e_Assouline D._2017_2-s2.0-85006412322.txt", "11_e_Kaklauskas A._2021_2-s2.0-85106543777.txt",
"12_e_Flores_2020_2-s2.0-85070232829.txt", "15_e_Hasani_2021_2-s2.0-85117710541.txt",
"2_e_Rovira-Más_2021_2-s2.0-85104992071.txt" , "4_e_Banerjee_2022_2-s2.0-85140768946.txt",
"6_e_2-s2.0-84874029300.txt"  , "6_e_2-s2.0-85115424775.txt",
"9_e_Hayhoe T._2019_2-s2.0-85071002780.txt" , "9_e_Weber-Lewerenz B._2021_2-s2.0-85114689451.txt")
remove_papers_cr <- c("3_r_Clark_2020_2-s2.0-85079650530.txt",
"6_r_2-s2.0-85080922176.txt",
"3_r_Burton_2021_2-s2.0-85102508002.txt",
"3_c_Backholer_2021_2-s2.0-85105030886.txt",
"3_c_Hernandez_2019_2-s2.0-85065755918.txt",
"7_r_Zheng Y.-J._2013_2-s2.0-84874178814.txt",
"2_r_Kumar_2023_2-s2.0-85133962101.txt",
"12_r_Mitchell_2022_2-s2.0-85124974008.txt",
"3_r_Preeti_2023_2-s2.0-85174966697.txt",
"10_c_Ahmad_2020_2-s2.0-85111288568.txt",
"11_r_Heidari A._2022_2-s2.0-85135362056.txt",
"12_c_Shu_2017_2-s2.0-85026247767.txt",
"13_c_Rowan N.J._2022_2-s2.0-85131442104.txt",
"6_c_2-s2.0-85076529105.txt",
"7_c_Ahmad T._2022_2-s2.0-85121261678.txt",
"7_r_Goswami R.K._2022_2-s2.0-85136105898.txt"
)
papers_titles <- papers_titles[!papers_titles %in% remove_papers_emp] #
npapers <- length(papers_titles)
end <- npapers
article_length <- c()
for (i in c(start:end)){
try({
doc <- scan(papers_titles[i], what = "character", sep = "\n") #importing the .txt file
doc <- paste(doc, collapse=" ") #separating each character by " "
doc <- gsub("- ", "", doc)  # undo hyphenation
doc <- gsub('\f', " ", doc) #form feed character
doc <- gsub("[^A-Za-z[:space:]]", " ", doc) #removing all non-words and non-spaces
doc <- gsub(" +", " ", doc) #removing all more than 1 spaces
doc <- gsub('\n', " ", doc) #removing paragraph jump
doc <- trimws(doc) #removing all the spaces at the beginning and end of the string
doc <- tolower(doc) #converting to lowercase
words <- strsplit(doc," ") #splitting the whole string into single characters
articles[[i]] <- data.frame(table(words))
wn <- nrow(articles[[i]]) # wn stands for words number in the article
article_length <- c(article_length, wn) #vector with the length of each paper
names(articles)[i] <- papers_titles[i]
print(i)
})
}
words_as_index <- function(data_frame, i){
df           <- as.data.frame(data_frame[[i]]$Freq)
colnames(df) <- names(data_frame[i])
rownames(df) <- data_frame[[i]]$words
return(df)
}
#Applying the function
words_frequencies = list()
j = 0
deleted_papers <- 0
new_articles <- articles
for (i in start:end){
print(i)
if(length(row.names(articles[[i]])!=0)){
j = j + 1
words_frequencies[[j]] <- words_as_index(articles,i)}
else{
print (paste0("The ", as.character(i), "th list-entry is empty - following PDF seems not having been read rightly:  ", as.character(papers_titles[i]) ) )
deleted_papers <- deleted_papers + 1
new_articles <- new_articles[-i]
}
}
npapers <- npapers - deleted_papers
end <- npapers
articles <- new_articles
##--CREATING SINGLE DATAFRAME WITH ALL THE ARTICLES' WORDS----
for ( i in 1:(length(words_frequencies)-1) ){
if (i == 1){
df1 = words_frequencies[[i]]
df2 = words_frequencies[[i+1]]}else{df2 = words_frequencies[[i+1]]}
df1 <- merge(df1, df2, all=T,by="row.names",sort=F)
# The merge function drops the row.names, and in turn adds a column named "row.names": Correct this!
row.names(df1) <- df1[,1] #putting the words as the index (again)
print(i)
df1 <- df1[,-1]#removing the first column "row.names"
}
allwords <- df1
rm(df1, df2)
##--CREATING ABUNDANCE TABLE----
###vector of unique words
word_vector<-as.factor(sort(row.names(allwords))) #words sorted
word_vector<- word_vector[which(nchar(as.character(word_vector))<20)] #all words less that 20 length
word_vector<-as.factor(word_vector) #words as factor
word_levels<-levels(word_vector) #words as levels
## abundance table
word_df <- data.frame(words = word_levels)
colnames(word_df)<-"words"
#populating the table with all the words present in each article
for (j in c(1:end)){
article <-articles[[j]]
article_filtered <-article[article$words %in% word_levels,]
word_df <- merge(word_df, article_filtered, by="words",all.x=T)
print(j)
}
word_df<-word_df[,2:(npapers+1)] #removing first column
rownames(word_df) <- word_levels #putting the words as index
#replacing NAs with 0 and renaming columns
for (i in 1:npapers) word_df[is.na(word_df[,i]),i] <- 0
colnames(word_df)<-names(articles)[c(1:npapers)]
## Correcting the frequencies of words by the total words in each article
word_df <- sweep(word_df, 2, article_length, "/")
word_df <- word_df*1000
##--RUNNING DCA and CLUSTERING ----
# getting the optimal number of words to be subselected according to their frequency across all articles
rows_number <- nrow(word_df)
top <- round(nrow(word_df)*0.2,0) #change here to get the percentage of top words with highest abundance
freq <- 1
# While loop
while (rows_number>=top) {
moritz<- word_df[apply(ifelse(word_df>0,1,0),1,sum)>freq,]
rows_number <- nrow(moritz)
# Increment the counter to avoid infinite loop
freq <- freq + 1
}
freq <- freq -1
paste0("The higher frequency to get the top20 is ", freq)
moritz2<- word_df[apply(ifelse(word_df>0,1,0),1,sum)>freq,]
abundance <- moritz2
abundancet <- t(abundance)
abundancet <- abundancet[rowSums(abundancet)>0,]
abundancet<- log(abundancet+1)  #scaling
model<-decorana(abundancet,iweigh=0, ira=0)
plot(model)
nk<-2 # initial number of clusters
cutmodel_values <- list()
for (i in c(2:30)){
cutmodel <-cutree(modelclust,k=nk)
elements_incluster <- table(cutmodel)
cluster_below_number <- FALSE
gus <- c()
for (j in c(1:nk)){
num_elements <- as.numeric(elements_incluster[j])
gus <- c(gus, num_elements)
if (num_elements < 1){
cluster_below_number <- TRUE
break
}
}
if (cluster_below_number){
break
}
cutmodel_values[[i]] <- gus
print(elements_incluster)
nk <- nk + 1
}
number_of_clusters <- 10
nk <- number_of_clusters - 1
# Define a vector of colors, one for each cluster
cluster_colors <- c("#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#FF00FF",
"#00FFFF", "#800000", "#808000", "#008000", "#800080", "#008080")
# Update the barplot code to use these colors consistently for each cluster
barplot(t(cutmodel_m[1:nk, 1:(nk+1)]),
beside = TRUE,
horiz = TRUE,
col = colores[1:(nk+1)],
legend.text = paste("Cluster", 1:(nk+1)),
args.legend = list(x = "topright", bty = "n", title = "Clusters"),
xlab = "Frequency",
ylab = "Number of clusters",
names.arg = paste((1:nk)+1),
main = "Distribution of clusters")
modelclust<-agnes(abundancet,method="ward")
nk<-2 # initial number of clusters
cutmodel_values <- list()
for (i in c(2:30)){
cutmodel <-cutree(modelclust,k=nk)
elements_incluster <- table(cutmodel)
cluster_below_number <- FALSE
gus <- c()
for (j in c(1:nk)){
num_elements <- as.numeric(elements_incluster[j])
gus <- c(gus, num_elements)
if (num_elements < 1){
cluster_below_number <- TRUE
break
}
}
if (cluster_below_number){
break
}
cutmodel_values[[i]] <- gus
print(elements_incluster)
nk <- nk + 1
}
nk <- nk -1
paste0("The maximum number of clusters is ", nk)
#---ploting the cutmodel
num_rows <- nk
num_columns <- nk
cutmodel_m<- matrix(NA, nrow = num_rows, ncol = num_columns)
for (i in 2:num_rows) {
# Fill the matrix row by row
cutmodel_m[i, 1:length(cutmodel_values[[i]])] <- cutmodel_values[[i]]
}
cutmodel_m <- cutmodel_m[-1,]
colores <- c("#FF0000","#008000","#800000","#0000FF","#808000","#FF00FF",
"#800080","#008080","#000080","#FFA500","#A52A2A","#8B4513","#DC143C",
"#DA70D6","#7FFF00","#D2691E","#00CED1","#9400D3","#FFD700","#ADFF2F","#FF69B4","#CD5C5C"
) #for empirical
number_of_clusters <- 10
nk <- number_of_clusters - 1
# Define a vector of colors, one for each cluster
cluster_colors <- c("#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#FF00FF",
"#00FFFF", "#800000", "#808000", "#008000", "#800080", "#008080")
# Update the barplot code to use these colors consistently for each cluster
barplot(t(cutmodel_m[1:nk, 1:(nk+1)]),
beside = TRUE,
horiz = TRUE,
col = colores[1:(nk+1)],
legend.text = paste("Cluster", 1:(nk+1)),
args.legend = list(x = "topright", bty = "n", title = "Clusters"),
xlab = "Frequency",
ylab = "Number of clusters",
names.arg = paste((1:nk)+1),
main = "Distribution of clusters")
nk <- 8
cutmodel <-cutree(modelclust,k=nk)
table(cutmodel)
temp5<-indval(abundancet,cutmodel,numitr=1000)
summary(temp5)
#getting the DCA coordinates for the plot
achsen<-model$cproj[,c(1:2)]
#combining model columns with axis from DCA
cluster_dca<-cbind(round(temp5$indval,d=2),temp5$pval,names(temp5$pval),achsen)
cluster_dcap<-cluster_dca[cluster_dca[nk+1]<0.05,] #p-value less than ...
final_cluster<-cluster_dcap[which(apply(cluster_dcap[,c(1:nk)],1,mean)>0.01),] #filtering based on the mean of abundance across clusters of each word
par(xpd=T)
par(mar=c(4,4,0.2,0.2))
plot(final_cluster$DCA1,final_cluster$DCA2,xlim=c(min(final_cluster$DCA1)-0,max(final_cluster$DCA1)+0),ylim=c(min(final_cluster$DCA2)-0,max(final_cluster$DCA2)+0),xlab="DCA1",ylab="DCA2",type="n")
wordnumber<-5
subsets <- list()
for (i in 1:nk){
subsets[[i]] <- final_cluster[order(final_cluster[,i],decreasing=T)[c(1: wordnumber)],]
#text(subsets[[i]]$DCA1[c(1:wordnumber)],subsets[[i]]$DCA2[c(1:wordnumber)],labels=rownames(subsets[[i]])[c(1:wordnumber)],col=colores[i] ,cex=0.8)
subsets[[i]]$cluster <- i
}
#-----EMPIRICAL ARTICLES------
par(xpd=T)
par(mar=c(4,4,0.2,0.2))
plot(final_cluster$DCA1,final_cluster$DCA2,xlim=c(min(final_cluster$DCA1)-0.3,max(final_cluster$DCA1)+0.1),ylim=c(min(final_cluster$DCA2)+0,max(final_cluster$DCA2)-0),xlab="DCA1",ylab="DCA2",type="n")
text(subsets[[1]]$DCA1[c(1)],subsets[[1]]$DCA2[c(1)], labels=rownames(subsets[[1]])[c(1)],col=colores[1],cex=1, font=2)
text(subsets[[1]]$DCA1[c(2)],subsets[[1]]$DCA2[c(2)], labels=rownames(subsets[[1]])[c(2)],col=colores[1],cex=1, font=2)
text(subsets[[1]]$DCA1[c(3)],subsets[[1]]$DCA2[c(3)]-0, labels=rownames(subsets[[1]])[c(3)],col=colores[1],cex=1, font=2)
text(subsets[[1]]$DCA1[c(4)]+0,subsets[[1]]$DCA2[c(4)]-0, labels=rownames(subsets[[1]])[c(4)],col=colores[1],cex=1,font=2)
text(subsets[[1]]$DCA1[c(5)],subsets[[1]]$DCA2[c(5)]+0.3, labels=rownames(subsets[[1]])[c(5)],col=colores[1],cex=1, font=2)
text(subsets[[2]]$DCA1[c(1)],subsets[[2]]$DCA2[c(1)], labels=rownames(subsets[[2]])[c(1)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(2)],subsets[[2]]$DCA2[c(2)], labels=rownames(subsets[[2]])[c(2)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(3)],subsets[[2]]$DCA2[c(3)], labels=rownames(subsets[[2]])[c(3)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(4)],subsets[[2]]$DCA2[c(4)], labels=rownames(subsets[[2]])[c(4)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(5)],subsets[[2]]$DCA2[c(5)], labels=rownames(subsets[[2]])[c(5)],col=colores[2],cex=1,font=2)
text(subsets[[3]]$DCA1[c(1)],subsets[[3]]$DCA2[c(1)]+0.15, labels=rownames(subsets[[3]])[c(1)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(2)],subsets[[3]]$DCA2[c(2)], labels=rownames(subsets[[3]])[c(2)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(3)],subsets[[3]]$DCA2[c(3)], labels=rownames(subsets[[3]])[c(3)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(4)],subsets[[3]]$DCA2[c(4)]-0, labels=rownames(subsets[[3]])[c(4)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(5)],subsets[[3]]$DCA2[c(5)], labels=rownames(subsets[[3]])[c(5)],col=colores[3],cex=1,font=2)
text(subsets[[4]]$DCA1[c(1)],subsets[[4]]$DCA2[c(1)], labels=rownames(subsets[[4]])[c(1)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(2)],subsets[[4]]$DCA2[c(2)], labels=rownames(subsets[[4]])[c(2)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(3)],subsets[[4]]$DCA2[c(3)], labels=rownames(subsets[[4]])[c(3)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(4)],subsets[[4]]$DCA2[c(4)], labels=rownames(subsets[[4]])[c(4)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(5)],subsets[[4]]$DCA2[c(5)], labels=rownames(subsets[[4]])[c(5)],col=colores[4],cex=1,font=2)
text(subsets[[5]]$DCA1[c(1)],subsets[[5]]$DCA2[c(1)], labels=rownames(subsets[[5]])[c(1)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(2)],subsets[[5]]$DCA2[c(2)], labels=rownames(subsets[[5]])[c(2)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(3)],subsets[[5]]$DCA2[c(3)], labels=rownames(subsets[[5]])[c(3)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(4)],subsets[[5]]$DCA2[c(4)], labels=rownames(subsets[[5]])[c(4)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(5)],subsets[[5]]$DCA2[c(5)], labels=rownames(subsets[[5]])[c(5)],col=colores[5],cex=1,font=2)
text(subsets[[6]]$DCA1[c(1)],subsets[[6]]$DCA2[c(1)], labels=rownames(subsets[[6]])[c(1)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(2)],subsets[[6]]$DCA2[c(2)]+0, labels=rownames(subsets[[6]])[c(2)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(3)],subsets[[6]]$DCA2[c(3)], labels=rownames(subsets[[6]])[c(3)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(4)],subsets[[6]]$DCA2[c(4)], labels=rownames(subsets[[6]])[c(4)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(5)],subsets[[6]]$DCA2[c(5)], labels=rownames(subsets[[6]])[c(5)],col=colores[6],cex=1,font=2)
text(subsets[[7]]$DCA1[c(1)],subsets[[7]]$DCA2[c(1)], labels=rownames(subsets[[7]])[c(1)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(2)],subsets[[7]]$DCA2[c(2)], labels=rownames(subsets[[7]])[c(2)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(3)],subsets[[7]]$DCA2[c(3)], labels=rownames(subsets[[7]])[c(3)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(4)],subsets[[7]]$DCA2[c(4)], labels=rownames(subsets[[7]])[c(4)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(5)]-0,subsets[[7]]$DCA2[c(5)], labels=rownames(subsets[[7]])[c(5)],col=colores[7],cex=1,font=2)
text(subsets[[8]]$DCA1[c(1)],subsets[[8]]$DCA2[c(1)], labels=rownames(subsets[[8]])[c(1)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(2)],subsets[[8]]$DCA2[c(2)], labels=rownames(subsets[[8]])[c(2)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(3)],subsets[[8]]$DCA2[c(3)], labels=rownames(subsets[[8]])[c(3)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(4)],subsets[[8]]$DCA2[c(4)], labels=rownames(subsets[[8]])[c(4)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(5)],subsets[[8]]$DCA2[c(5)]+0.15, labels=rownames(subsets[[8]])[c(5)],col=colores[8],cex=1,font=2)
dend <- as.dendrogram(modelclust)
# Add the cluster information to the dendrogram object using dendextend
labios <- c("HEALTHCARE", "INDUSTRY", "EDUCATION", "VEGETATION", "WATER", "FORECASTING", "REMOTE SENSING", "CLEAN ENERGY")
labios_c <- c("BIOTECHNOLOGY", "BIODIVERSITY", "SMART FARMING", "SMART CITIES", "CLEAN ENERGY", "FORECASTING", "EDUCATION", "HEALTHCARE")
colores_dend_e <- c("#FF0000","#800080","#008080", "#008000","#0000FF","#800000","#808000","#FF00FF") #for empirical
colores_dend_c <- c("#800080","#0000FF", "#008000","#800000","#FF00FF", "#808000", "#008080","#FF0000") #for conceptual
#labels(dend) <- rep("", length(labels(dend))) #put this line as comment when you put the ellipsis to the word cloud
dend <- color_branches(dend, k = nk, col=colores_dend_c)
sub_dend <- get_subdendrograms(dend, k = nk) #getting the subdendrograms in a list
clusters <- list() #the clusters
site_names <- list() #the names of the papers or labels
member_count <- list(list()) #the number of papers in each branch
clusters_length <- c()
for(i in 1:length(sub_dend)){
clusters[[i]] <- sub_dend[[i]]
site_names[[i]] <- labels(clusters[[i]])
clusters_length <- c(clusters_length,length(site_names[[i]]))
member_count[[i]] <- length(site_names[[i]])
for(j in 1:2){
member_count[[i]][[j]]<-length(labels(clusters[[i]][[j]]))
}
}
grupos <- data.frame(article= row.names(abundancet), Cluster = cutmodel)
grupos$palabras <- NA
for (i in 1:nrow(grupos)) {
cluster_id <- grupos$Cluster[i]
# Get the elements (names) for this specific cluster
palabras_for_cluster <- row.names(subsets[[cluster_id]])
# Concatenate the elements into a single string, or store as a list
grupos$palabras[i] <- paste(palabras_for_cluster, collapse = ", ") # or `I(list(palabras_for_cluster))` if you want a list
}
cc <- do.call(rbind, subsets) #concatenating all the dataframes in the subsets list
cc2 <- cc[,c((ncol(cc)-2):ncol(cc))] #getting the columns
coordinates <- cc2[, c("DCA1", "DCA2")]
clusteros <- cc2$cluster
row.names(coordinates)<-row.names(cc2)
compute_angle <- function(cov_matrix) {
eig <- eigen(cov_matrix)
# Eigenvector corresponding to the largest eigenvalue
max_eigenvector <- eig$vectors[, 1]
# Calculate the angle in degrees
angle <- atan2(max_eigenvector[2], max_eigenvector[1]) * 180 / pi
return(angle)
}
for (i in unique(clusteros)) {
# Get points belonging to the current cluster
cluster_points <- coordinates[clusteros == i, ]
cov_matrix <- cov(cluster_points[, c("DCA1", "DCA2")])
angle <- compute_angle(cov_matrix)
#angle <- compute_pca_angle(cluster_points[, c("DCA1", "DCA2")])
# Compute the mean (center) of the current cluster
center_x <- mean(cluster_points$DCA1)
center_y <- mean(cluster_points$DCA2)
# Draw an ellipse around the cluster points with the desired color
color_with_alpha <- rgb(t(col2rgb(colores[i])) / 255, alpha = 0.2)
draw.ellipse(x = center_x, y = center_y, a = sd(cluster_points$DCA1)*2.5, b = sd(cluster_points$DCA2)*2,  # 3 and 1.5 for empirical, 2.5 and 2 for conceptual
border = NA, col=color_with_alpha, lwd = 1, angle=angle)  # Manually apply the custom color
}
par(xpd=T)
par(mar=c(4,4,0.2,0.2))
plot(final_cluster$DCA1,final_cluster$DCA2,xlim=c(min(final_cluster$DCA1)-0.3,max(final_cluster$DCA1)+0.1),ylim=c(min(final_cluster$DCA2)+0,max(final_cluster$DCA2)-0),xlab="DCA1",ylab="DCA2",type="n")
text(subsets[[1]]$DCA1[c(1)],subsets[[1]]$DCA2[c(1)], labels=rownames(subsets[[1]])[c(1)],col=colores[1],cex=1, font=2)
text(subsets[[1]]$DCA1[c(2)],subsets[[1]]$DCA2[c(2)], labels=rownames(subsets[[1]])[c(2)],col=colores[1],cex=1, font=2)
text(subsets[[1]]$DCA1[c(3)],subsets[[1]]$DCA2[c(3)]-0, labels=rownames(subsets[[1]])[c(3)],col=colores[1],cex=1, font=2)
text(subsets[[1]]$DCA1[c(4)]+0,subsets[[1]]$DCA2[c(4)]-0, labels=rownames(subsets[[1]])[c(4)],col=colores[1],cex=1,font=2)
text(subsets[[1]]$DCA1[c(5)],subsets[[1]]$DCA2[c(5)]+0.3, labels=rownames(subsets[[1]])[c(5)],col=colores[1],cex=1, font=2)
text(subsets[[2]]$DCA1[c(1)],subsets[[2]]$DCA2[c(1)], labels=rownames(subsets[[2]])[c(1)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(2)],subsets[[2]]$DCA2[c(2)], labels=rownames(subsets[[2]])[c(2)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(3)],subsets[[2]]$DCA2[c(3)], labels=rownames(subsets[[2]])[c(3)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(4)],subsets[[2]]$DCA2[c(4)], labels=rownames(subsets[[2]])[c(4)],col=colores[2],cex=1,font=2)
text(subsets[[2]]$DCA1[c(5)],subsets[[2]]$DCA2[c(5)], labels=rownames(subsets[[2]])[c(5)],col=colores[2],cex=1,font=2)
text(subsets[[3]]$DCA1[c(1)],subsets[[3]]$DCA2[c(1)]+0.15, labels=rownames(subsets[[3]])[c(1)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(2)],subsets[[3]]$DCA2[c(2)], labels=rownames(subsets[[3]])[c(2)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(3)],subsets[[3]]$DCA2[c(3)], labels=rownames(subsets[[3]])[c(3)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(4)],subsets[[3]]$DCA2[c(4)]-0, labels=rownames(subsets[[3]])[c(4)],col=colores[3],cex=1,font=2)
text(subsets[[3]]$DCA1[c(5)],subsets[[3]]$DCA2[c(5)], labels=rownames(subsets[[3]])[c(5)],col=colores[3],cex=1,font=2)
text(subsets[[4]]$DCA1[c(1)],subsets[[4]]$DCA2[c(1)], labels=rownames(subsets[[4]])[c(1)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(2)],subsets[[4]]$DCA2[c(2)], labels=rownames(subsets[[4]])[c(2)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(3)],subsets[[4]]$DCA2[c(3)], labels=rownames(subsets[[4]])[c(3)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(4)],subsets[[4]]$DCA2[c(4)], labels=rownames(subsets[[4]])[c(4)],col=colores[4],cex=1,font=2)
text(subsets[[4]]$DCA1[c(5)],subsets[[4]]$DCA2[c(5)], labels=rownames(subsets[[4]])[c(5)],col=colores[4],cex=1,font=2)
text(subsets[[5]]$DCA1[c(1)],subsets[[5]]$DCA2[c(1)], labels=rownames(subsets[[5]])[c(1)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(2)],subsets[[5]]$DCA2[c(2)], labels=rownames(subsets[[5]])[c(2)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(3)],subsets[[5]]$DCA2[c(3)], labels=rownames(subsets[[5]])[c(3)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(4)],subsets[[5]]$DCA2[c(4)], labels=rownames(subsets[[5]])[c(4)],col=colores[5],cex=1,font=2)
text(subsets[[5]]$DCA1[c(5)],subsets[[5]]$DCA2[c(5)], labels=rownames(subsets[[5]])[c(5)],col=colores[5],cex=1,font=2)
text(subsets[[6]]$DCA1[c(1)],subsets[[6]]$DCA2[c(1)], labels=rownames(subsets[[6]])[c(1)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(2)],subsets[[6]]$DCA2[c(2)]+0, labels=rownames(subsets[[6]])[c(2)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(3)],subsets[[6]]$DCA2[c(3)], labels=rownames(subsets[[6]])[c(3)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(4)],subsets[[6]]$DCA2[c(4)], labels=rownames(subsets[[6]])[c(4)],col=colores[6],cex=1,font=2)
text(subsets[[6]]$DCA1[c(5)],subsets[[6]]$DCA2[c(5)], labels=rownames(subsets[[6]])[c(5)],col=colores[6],cex=1,font=2)
text(subsets[[7]]$DCA1[c(1)],subsets[[7]]$DCA2[c(1)], labels=rownames(subsets[[7]])[c(1)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(2)],subsets[[7]]$DCA2[c(2)], labels=rownames(subsets[[7]])[c(2)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(3)],subsets[[7]]$DCA2[c(3)], labels=rownames(subsets[[7]])[c(3)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(4)],subsets[[7]]$DCA2[c(4)], labels=rownames(subsets[[7]])[c(4)],col=colores[7],cex=1,font=2)
text(subsets[[7]]$DCA1[c(5)]-0,subsets[[7]]$DCA2[c(5)], labels=rownames(subsets[[7]])[c(5)],col=colores[7],cex=1,font=2)
text(subsets[[8]]$DCA1[c(1)],subsets[[8]]$DCA2[c(1)], labels=rownames(subsets[[8]])[c(1)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(2)],subsets[[8]]$DCA2[c(2)], labels=rownames(subsets[[8]])[c(2)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(3)],subsets[[8]]$DCA2[c(3)], labels=rownames(subsets[[8]])[c(3)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(4)],subsets[[8]]$DCA2[c(4)], labels=rownames(subsets[[8]])[c(4)],col=colores[8],cex=1,font=2)
text(subsets[[8]]$DCA1[c(5)],subsets[[8]]$DCA2[c(5)]+0.15, labels=rownames(subsets[[8]])[c(5)],col=colores[8],cex=1,font=2)
for (i in unique(clusteros)) {
# Get points belonging to the current cluster
cluster_points <- coordinates[clusteros == i, ]
cov_matrix <- cov(cluster_points[, c("DCA1", "DCA2")])
angle <- compute_angle(cov_matrix)
#angle <- compute_pca_angle(cluster_points[, c("DCA1", "DCA2")])
# Compute the mean (center) of the current cluster
center_x <- mean(cluster_points$DCA1)
center_y <- mean(cluster_points$DCA2)
# Draw an ellipse around the cluster points with the desired color
color_with_alpha <- rgb(t(col2rgb(colores[i])) / 255, alpha = 0.2)
draw.ellipse(x = center_x, y = center_y, a = sd(cluster_points$DCA1)*3, b = sd(cluster_points$DCA2)*1.5,  # 3 and 1.5 for empirical, 2.5 and 2 for conceptual
border = NA, col=color_with_alpha, lwd = 1, angle=angle)  # Manually apply the custom color
}
dend <- as.dendrogram(modelclust)
# Add the cluster information to the dendrogram object using dendextend
labios <- c("HEALTHCARE", "INDUSTRY", "EDUCATION", "VEGETATION", "WATER", "FORECASTING", "REMOTE SENSING", "CLEAN ENERGY")
labios_c <- c("BIOTECHNOLOGY", "BIODIVERSITY", "SMART FARMING", "SMART CITIES", "CLEAN ENERGY", "FORECASTING", "EDUCATION", "HEALTHCARE")
colores_dend_e <- c("#FF0000","#800080","#008080", "#008000","#0000FF","#800000","#808000","#FF00FF") #for empirical
colores_dend_c <- c("#800080","#0000FF", "#008000","#800000","#FF00FF", "#808000", "#008080","#FF0000") #for conceptual
labels(dend) <- rep("", length(labels(dend))) #put this line as comment when you put the ellipsis to the word cloud
dend <- color_branches(dend, k = nk, col=colores_dend_c)
# Plot the dendrogram with colored clusters
plot(dend)
